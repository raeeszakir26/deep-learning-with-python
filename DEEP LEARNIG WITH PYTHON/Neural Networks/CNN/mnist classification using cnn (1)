{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPr0oerXrSkNaBueP8X3mKj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"12gbHsY5rutq","executionInfo":{"status":"ok","timestamp":1727265815566,"user_tz":420,"elapsed":10848,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from keras.datasets import fashion_mnist\n","from keras.utils import to_categorical"]},{"cell_type":"code","source":["(X_train, Y_train), (X_test,Y_test) = fashion_mnist.load_data()"],"metadata":{"id":"DdxZqeNqtXsQ","executionInfo":{"status":"ok","timestamp":1727265818414,"user_tz":420,"elapsed":2916,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"17e5833f-c6fb-4f2e-8e45-eb21323d6092"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","\u001b[1m29515/29515\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","\u001b[1m26421880/26421880\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","\u001b[1m5148/5148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","\u001b[1m4422102/4422102\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]}]},{"cell_type":"code","source":["X_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kWhjkDMFuHuB","executionInfo":{"status":"ok","timestamp":1727265818416,"user_tz":420,"elapsed":23,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"0de610d5-810f-4a03-f7d2-ca9b6606e532"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60000, 28, 28)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["Y_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qMjZDM5xuUmC","executionInfo":{"status":"ok","timestamp":1727265818417,"user_tz":420,"elapsed":19,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"8c00bc2d-f651-4442-bf69-6ed139e2df79"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([9, 0, 0, ..., 3, 0, 5], dtype=uint8)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["plt.imshow(X_train[6000])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"Yqvg5ESBuZ-B","executionInfo":{"status":"ok","timestamp":1727265818417,"user_tz":420,"elapsed":15,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"4db399d8-6a45-4f7a-bfe4-681699d644d0"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x782292aae800>"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["pd.Series(Y_train).nunique\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":186},"id":"NR4ErF81u0Qu","executionInfo":{"status":"ok","timestamp":1727265862856,"user_tz":420,"elapsed":597,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"2fb6555b-0b10-4c2e-ad46-4fb1373b7cfc"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method IndexOpsMixin.nunique of 0        9\n","1        0\n","2        0\n","3        3\n","4        0\n","        ..\n","59995    5\n","59996    1\n","59997    3\n","59998    0\n","59999    5\n","Length: 60000, dtype: uint8>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.base.IndexOpsMixin.nunique</b><br/>def nunique(dropna: bool=True) -&gt; int</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/base.py</a>Return number of unique elements in the object.\n","\n","Excludes NA values by default.\n","\n","Parameters\n","----------\n","dropna : bool, default True\n","    Don&#x27;t include NaN in the count.\n","\n","Returns\n","-------\n","int\n","\n","See Also\n","--------\n","DataFrame.nunique: Method nunique for DataFrame.\n","Series.count: Count non-NA/null observations in the Series.\n","\n","Examples\n","--------\n","&gt;&gt;&gt; s = pd.Series([1, 3, 5, 7, 7])\n","&gt;&gt;&gt; s\n","0    1\n","1    3\n","2    5\n","3    7\n","4    7\n","dtype: int64\n","\n","&gt;&gt;&gt; s.nunique()\n","4</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 1028);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\n","X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)"],"metadata":{"id":"J91b4DxRvffS","executionInfo":{"status":"ok","timestamp":1727265863574,"user_tz":420,"elapsed":11,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["X_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"utWaTTPAwp7C","executionInfo":{"status":"ok","timestamp":1727265864993,"user_tz":420,"elapsed":15,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"bba8e1d8-9733-430a-c85d-c20e3287f02b"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60000, 28, 28, 1)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["#converting data into right shape\n","X_train = X_train /255\n","X_test = X_test /255.0"],"metadata":{"id":"d12Qb6iawzgL","executionInfo":{"status":"ok","timestamp":1727265867563,"user_tz":420,"elapsed":758,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["Y_train = to_categorical(Y_train, 10)\n","Y_test = to_categorical(Y_test, 10)\n","Y_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T3Db3jGexmRi","executionInfo":{"status":"ok","timestamp":1727265869413,"user_tz":420,"elapsed":576,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"e067ed65-0726-4b87-c8a5-f677e6c1ca0a"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0., ..., 0., 0., 1.],\n","       [1., 0., 0., ..., 0., 0., 0.],\n","       [1., 0., 0., ..., 0., 0., 0.],\n","       ...,\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [1., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.]])"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["#without augmentation\n","from keras.layers import Dense, Flatten\n","from keras.layers import Conv2D, Minpooling2D\n","from keras.models import sequential"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"Q5_-eQSXybZh","executionInfo":{"status":"error","timestamp":1727265871367,"user_tz":420,"elapsed":595,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"3d70f2ed-088d-4f64-da20-9e79104d0579"},"execution_count":13,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"cannot import name 'Minpooling2D' from 'keras.layers' (/usr/local/lib/python3.10/dist-packages/keras/api/layers/__init__.py)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-b3b03079323b>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#without augmentation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFlatten\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mConv2D\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMinpooling2D\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msequential\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'Minpooling2D' from 'keras.layers' (/usr/local/lib/python3.10/dist-packages/keras/api/layers/__init__.py)","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["model = sequential()\n","model.add(Conv2D(33,kernel_size=(5, 5),\n","                 strides=(1,1),\n","                 activation='relu',\n","                 input_shape=(28,28,1)))\n","model.add(Minpooling2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Flatten ())\n","model.add(Dense(1000, activation='relu'))\n","model.add(Dense(10, activation='softmax'))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"97-bbE-o0hPo","executionInfo":{"status":"error","timestamp":1689228648963,"user_tz":420,"elapsed":10,"user":{"displayName":"Ehty alee1919","userId":"16579335136864881361"}},"outputId":"5cad0e97-9e3b-43d0-802b-d5761a85d0ea"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-c6cacb5bc332>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msequential\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m model.add(Conv2D(33,kernel_size=(5, 5),\n\u001b[1;32m      3\u001b[0m                  \u001b[0mstrides\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                  \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                  input_shape=(28,28,1)))\n","\u001b[0;31mNameError\u001b[0m: name 'sequential' is not defined"]}]}]}